<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Judge Document</title>
  <link rel="stylesheet" href="/static/styleparty.css">
  <!-- modal form css -->
  <style>
    /*add full-width input fields*/
    input[type=text],
    input[type=files] {
      width: 100%;
      padding: 12px 20px;
      margin: 8px 0;
      display: inline-block;
      border: 2px solid #ccc;
      box-sizing: border-box;
    }

    /* set a style for all buttons*/
    button {
      background-color: green;
      color: white;
      padding: 14px 20px;
      margin: 8px 0;
      cursor: pointer;
      width: 100%;
    }

    /*set styles for the cancel button*/
    .cancelbtn {
      padding: 14px 20px;
      background-color: #FF2E00;
    }

    /*float cancel and signup buttons and add an equal width*/
    .cancelbtn,
    .signupbtn {
      margin-inline: auto;
      width: 70%
    }

    /*add padding to container elements*/
    .container {
      padding: 16px;
    }

    /*define the modalâ€™s background*/

    .modal {
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgb(0, 0, 0);
      background-color: rgba(0, 0, 0, 0.4);
      padding-top: 60px;
    }

    /*define the modal-content background*/

    .modal-content {
      background-color: #fefefe;
      margin: 5% auto 15% auto;
      border: 1px solid #888;
      width: 80%;
    }

    /*define the close button*/

    .close {
      position: absolute;
      right: 35px;
      top: 15px;
      color: #000;
      font-size: 40px;
      font-weight: bold;
    }

    /*define the close hover and focus effects*/

    .close:hover,
    .close:focus {
      color: red;
      cursor: pointer;
    }

    .clearfix::after {
      content: "";
      clear: both;
      display: table;
    }

    @media screen and (max-width: 600px) {

      .cancelbtn,
      .signupbtn {
        width: 100%;
      }
    }
  </style>
  <!-- card css -->
  <style>
    .cases {
      justify-content: left;
      justify-content: space-evenly;
      gap: 50px;
    }

    .card {
      width: 400px;
      height: 300px;
      border: 1px solid #ccc;
      border-radius: 10px;
      padding: 20px;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      background-color: #fcfcfc;
    }

    .header {
      font-size: 18px;
      font-weight: bold;
    }

    .folder-icon {
      width: 80px;
      /* Adjust size as needed */
      height: auto;
      /* Maintain aspect ratio */
    }

    .file-details {
      display: flex;
      align-items: center;
    }

    .file-name {
      margin-left: 10px;
    }

    .doc-id {
      font-size: 14px;
      color: #555;
      margin-top: 10px;
    }

    .uploaded-by {
      font-style: italic;
    }

    .button-container {
      text-align: center;
    }

    .view-document-button {
      padding: 10px 20px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .view-document-button:hover {
      background-color: #0056b3;
    }
  </style>
</head>

<body>
  <div class="Dashboard">
    <nav class="navbar">
      <div class="logo"><img src="/static/svg-image-1.png" alt="logo"></div>
      <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
        <li><a href="#">Contact</a></li>
        <a title="SIGN OUT" class="circle" href="#"><i class="fa-solid fa-right-from-bracket"></i></a>
      </ul>
    </nav>
    <main>
      <div class="cases">
      </div>
      <div class="CaseInfo">
        <div class="caseheading">Case Information</div>
        <div class="rule"></div>
        <div class="casedetail">
          <div class="cNo casedata">Case No : </div>
          <div class="cTitle casedata">Case Title : </div>
          <div class="cDescription casedata">Case Description : </div>
          <div class="judge casedata">Judge : Honorable </div>
        </div>
      </div>
    </main>
    <div id="popup" class="popup hidden">
      <h2>Unauthorized</h2>
      <div class="rule"></div>
      <p>You are not authorized, You need to log in.</p>
      <button type="button" id="okButton">OK</button>
    </div>
  </div>
  <script src="https://kit.fontawesome.com/0fbde46a6c.js" crossorigin="anonymous"></script>
  <script>
    //lets start building the document page for judge
    const token = "<%=intoken%>";
    const partyID = "<%=inpartyID%>";
    const requestBody = JSON.stringify({
      token,
      partyID
    });

    const popup = document.getElementById('popup');
    const okButton = document.getElementById('okButton');

    // Function to show the popup
    function showPopup() {
      popup.classList.remove('hidden');
    }


    // Event listener for OK button click
    okButton.addEventListener('click',()=>{window.location.href = `/pages/Home`;} );

    // Simulated API response handler
    function handleApiResponse(response) {
      if (response.status === 401) {
        showPopup();
      }
    }

    async function fetchDataAndArrange() {

      const response = await fetch("/api/v1/case/partyDetail", {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json' // Specify content type as JSON
        },
        body: requestBody,
      });
      handleApiResponse(response);
      const responseData = await response.json(); // Parse the JSON response
      if (responseData.success) {
        const party = responseData.partyDetail.documents; // Access the array of case objects
        arrange(party); // Call the arrange function with the array of cases
        casedetail(responseData.caseData);
      } else {
        console.error("Failed to retrieve cases:", responseData.message);
      }
    }

    // Define a function to arrange data into cards
    function arrange(doc) {
      // console.log(party);
      const cardsContainer = document.querySelector('.cases');
      doc.forEach(doc => {
        const card = document.createElement('div');
        card.classList = 'card';

        const head = document.createElement('div');
        head.classList = 'header';
        head.textContent = "Document Details";

        const img = document.createElement('img');
        img.classList = "folder-icon";
        img.setAttribute('src', '/static/folder image.png');
        img.setAttribute('alt', 'Folder Icon');

        const fileDetails = document.createElement('div');
        fileDetails.classList = "file-details";

        const spn = document.createElement('span');
        spn.classList = "file-name";
        spn.textContent = doc.fileName;

        fileDetails.appendChild(spn);

        const docID = document.createElement('div');
        docID.classList = "doc-id";
        docID.textContent = "Document ID : " + doc._id;

        const upby = document.createElement('div');
        upby.classList = "uploaded-by";
        upby.textContent = "Uploaded By : Advocate " + doc.uploadedBY.firstName + " " + doc.uploadedBY.lastName;

        const btnContainer = document.createElement('div');
        btnContainer.classList = "button-container";

        const hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        const filePath = doc.url;
        const filename = filePath.split('\\').pop();
        hiddenInput.setAttribute('value', filename);

        const btn = document.createElement('button');
        btn.classList = 'view-document-button';
        btn.innerText = "View Document";

        btn.onclick = function () {
          // Find the closest parent card element
          var card = this.closest('.card');
          if (card) {
            var fname = card.querySelector(".file-name").textContent;
            // Find the hidden input element within the card
            var hiddenInput = card.querySelector('input[type="hidden"]');
            if (hiddenInput) {
              var hiddenValue = hiddenInput.value;
              console.log(hiddenValue); // Output the hidden value
              console.log(fname);
              newpage(fname,hiddenValue);
            }
          }
        };
        btnContainer.appendChild(btn);
        card.appendChild(hiddenInput);
        card.appendChild(head);
        card.appendChild(img);
        card.appendChild(fileDetails);
        card.appendChild(docID);
        card.appendChild(upby);
        card.appendChild(btnContainer);
        cardsContainer.appendChild(card);
      });
    }

    //function to populate the information in right panel of the UI regarding the case information
    function casedetail(data) {
      //console.log(data);
      const caseNo = document.querySelector('.cNo');
      caseNo.textContent += data.caseNo;
      const casetitle = document.querySelector('.cTitle');
      casetitle.textContent += data.title;
      // console.log(data.title);
      const casedesc = document.querySelector('.cDescription');
      casedesc.textContent += data.caseDescription;
      // console.log(data.caseDescription);;
      const casejudge = document.querySelector('.judge');
      casejudge.textContent += data.judge.firstName + " " + data.judge.lastName;

    }
    // Immediately call the async function to fetch data and arrange cards
    fetchDataAndArrange();
    function newpage(fileName,fileLink){
      window.location.href = `/pages/doc-view?token=${token}&fileName=${fileName}&fileLink=${fileLink}`;
    };
  </script>
</body>

</html>